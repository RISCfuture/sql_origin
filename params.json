{"name":"SQL:Origin","body":"Adds backtraces to your SQL queries and query logs, so you know where your\r\nqueries are coming from. This only works with Rails, and is only tested with\r\nRails 3.2.\r\n\r\nWhy do I want this?\r\n-------------------\r\n\r\nSimple. To turn this\r\n\r\n![Without backtrace logging](https://img.skitch.com/20120614-rg8sqa2t7eweaj4swjqcufrcjr.png)\r\n\r\ninto this.\r\n\r\n![With backtrace logging](https://img.skitch.com/20120614-kcisbjqiaxfwbq82wbjm4iumfa.png)\r\n\r\nSo now, you needn't wonder where that odd-looking or broken SQL query is coming\r\nfrom.\r\n\r\nIt can also turn this\r\n\r\n````\r\nReading mysql slow query log from /usr/local/mysql/data/mysqld51-apple-slow.log\r\nCount: 1  Time=4.32s (4s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT \"events\".* FROM \"events\" WHERE \"events\".\"bug_id\" = ?\r\n\r\nCount: 3  Time=2.53s (7s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT \"deploys\".* FROM \"deploys\" WHERE \"deploys\".\"id\" = ?\r\n\r\nCount: 3  Time=2.13s (6s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT * FROM \"slugs\" WHERE (LOWER(\"slugs\".\"slug\") = LOWER(?) AND \"slugs\".\"scope\" IS NULL AND \"slugs\".\"sluggable_type\" = ?) LIMIT 1\r\n````\r\n\r\ninto this.\r\n\r\n````\r\nReading mysql slow query log from /usr/local/mysql/data/mysqld51-apple-slow.log\r\nCount: 1  Time=4.32s (4s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT \"events\".* FROM \"events\" WHERE \"events\".\"bug_id\" = ? /* app/models/project.rb:125:in `_callback_after_617' */\r\n\r\nCount: 3  Time=2.53s (7s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT \"deploys\".* FROM \"deploys\" WHERE \"deploys\".\"id\" = ? /* app/controllers/projects_controller.rb:359:in `require_or_load' */\r\n\r\nCount: 3  Time=2.13s (6s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@localhost\r\n SELECT * FROM \"slugs\" WHERE (LOWER(\"slugs\".\"slug\") = LOWER(?) AND \"slugs\".\"scope\" IS NULL AND \"slugs\".\"sluggable_type\" = ?) LIMIT 1 /* app/models/observers/bug_observer.rb:23:in `create_open_event' */\r\n````\r\n\r\nInstallation\r\n------------\r\n\r\nTo use, add SQL:Origin to your Gemfile:\r\n\r\n```` ruby\r\ngem 'sql_origin'\r\n````\r\n\r\nIf you would like to add three-line backtraces below every SQL query in your\r\nRails log, add\r\n\r\n```` ruby\r\nSQLOrigin.append_to_log\r\n````\r\n\r\nsomewhere in your Rails initialization (e.g., `application.rb` or a\r\n`config/initializer` file).\r\n\r\nIf you would like to add a one-line backtrace comment to every SQL query, add\r\n\r\n```` ruby\r\nSQLOrigin.append_to_query\r\n````\r\n\r\nsomewhere in your Rails initialization.\r\n\r\nIt would be typical to enable `append_to_log` for development and test, and\r\n`append_to_query` for production, in order to keep production logs small.\r\n\r\n### Backtrace Filtering\r\n\r\nBy default, files not under your Rails root, and files under `vendor`, are\r\nfiltered from your backtrace. If you need to filter other files, add them to\r\n{SQLOrigin::LIBRARY_PATHS}:\r\n\r\n```` ruby\r\nSQLOrigin::LIBRARY_PATHS << 'config/initializers/active_record_hacks.rb'\r\n````\r\n","tagline":"Add backtraces to your query log and queries themselves.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}